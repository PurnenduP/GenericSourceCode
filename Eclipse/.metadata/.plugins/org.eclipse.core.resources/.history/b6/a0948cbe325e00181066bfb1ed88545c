import java.util.*;
public class THanoi {

	int[] source;
	int[] dest;
	int[] helper;
	Hashtable<Integer,String> ObjectMapper;
	
	
	int size;
	
	THanoi(int size)
	{
		this.size = size;
		source = new int[size];
		dest = new int[size];
		helper = new int[size];
		
		ObjectMapper = new Hashtable<Integer,String>();
		ObjectMapper.put(source.hashCode(),"x");
		ObjectMapper.put(dest.hashCode(),"y");
		ObjectMapper.put(helper.hashCode(),"z");
		
		
		for(int i =0;i<size;i++)
		{
			source[i]= size-i;
			dest[i]=0;
			helper[i]=0;
		}
	}
	
	
	
	
	public void display_all()
	{
		display("x",source);
		display("y",dest);
		display("z",helper);
		
	}
	
//	public int[] copyStack(int[] a)
//	{
//		int temp[] = new int[size];
//		while(!a.isEmpty())
//		{
//			
//		}
//		return temp;
//	}
	
	public void display(String name,int[] arr)
	{
		if(name=="")
		{name="Unknown";}
		System.out.print(name+arr.hashCode()+"=");
		for (int i = 0; i < arr.length; i++) 
		{
			System.out.print(arr[i]);
			if(i<arr.length-1)
			{System.out.print(",");}
			
		}
		System.out.println();
	}
	
	public int pop(int[] arr)
	{
		int temp;
		for (int i = 0; i < arr.length; i++) {
			if(arr[i]==0)
			{
				if(i>=1)
				{
				temp = arr[i-1];
				arr[i-1]=0;
				return temp;
				}
			}
		}
		temp = arr[size-1];
		arr[size-1]=0;
		return temp;
	}
	
	public void push(int[] arr,int val)
	{
		for (int i = 0; i < arr.length; i++) {
			
			if(arr[i]==0)
			{
				arr[i]=val;
				break;
			}
		}
	}
	
	public void swap(int[] x,int[] y)
	{
		int temp = pop(x);
		push(y,temp);
	}
	
	public boolean is_swap_possible(int[] x,int[] y)
	{
		int top_x=0;
		int top_y=0;
		for (int i = 0; i < x.length; i++) {
			if(x[i]==0)
			{
				if(i>=1)
				{
					top_x=x[i-1];
				}
				break;
			}
		}
		for (int i = 0; i < y.length; i++) {
			if(y[i]==0)
			{
				if(i>=1)
				{
					top_y=y[i-1];
				}
				break;
			}
		}
		
		if(top_x==0)
		{
			return false;
		}
		else if(top_x !=0 && top_y==0)
		{
			return true;
		}
		else if(top_x !=0 && top_y!=0)

		{
			if(top_x >top_y)
			{
				return false;
			}
			else
			{
				return true;
			}
		}
	}
	public void SolveTowerOfHanoi_Recusion(int n,int[] x,int[] y,int[] z)
	{
		if(n>=1)
		{
			SolveTowerOfHanoi_Recusion(n-1,x,z,y);
			swap(x,y);
			System.out.println(ObjectMapper.get(x.hashCode())+ObjectMapper.get(y.hashCode()));
			display_all();
			SolveTowerOfHanoi_Recusion(n-1, z, y, x);			
		}
		
	}
	
	public boolean solution_found()
	{
		
		if (dest.length==size)
			return true;
		else
			return false;
	
	}
	
		
	
	public void SolveTowerOfHanoi_Iterative(int n,int[] x,int[] y,int[] z)
	{
		boolean break_flag;		
		while(true)
		{			
			if(solution_found())
			{ 
				break;
			}
			
			while(true)
			{

				if(no_of_disks(x)%2==0)
				{
					break_flag=swap(x,z);
				}
				else
				{
					break_flag=swap(x,y);
					
				}
				if(break_flag) break;
			}
			while(true)
			{

				if(no_of_disk(y)%2==0)
				{
					break_flag=swap(y,x);
				}
				else
				{
					break_flag=swap(y,z);
					
				}
				if(break_flag) break;
			}
			while(true)
			{
				if(no_of_disks(z)%2==0)
				{
					break_flag=swap(z,x);
				}
				else
				{
					break_flag=swap(z,y);
					
				}
				if(break_flag) break;
			}			
			
		}
		
		
	}
	
	public static void main(String[] args)
	{
		THanoi t = new THanoi(5);
		
		t.SolveTowerOfHanoi_Recusion(t.size, t.source, t.dest, t.helper);
		t.display_all();
//		t.display("source",t.source);
//		t.display("dest",t.dest);
//		t.display("helper",t.helper);
	}
	
}
